import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import { BsArrowLeftCircle, BsFillMoonFill, BsFillSunFill, BsFullscreenExit, BsThreeDots } from "react-icons/bs";
import { RxDot, RxDotFilled } from "react-icons/rx";
import { useDispatch, useSelector } from "react-redux";
import { getLang, isDark } from "../store/selector";
import { HU, GB } from 'country-flag-icons/react/3x2'
import Image from "next/image"
import jatek from "../public/kuldoncok/jatek.png"
import viewer from "../public/kuldoncok/viewer.png"
import github from "../public/kuldoncok/github.png"
import Carousel from "nuka-carousel/lib/carousel";
import png1 from "../public/kuldoncok/1.png"
import png2 from "../public/kuldoncok/2.png"
import png3 from "../public/kuldoncok/3.png"
import png4 from "../public/kuldoncok/4.png"
import png5 from "../public/kuldoncok/5.png"
import png6 from "../public/kuldoncok/6.png"
import { PhotoSlider } from "react-photo-view";
import 'react-photo-view/dist/react-photo-view.css';

export default function Kuldoncok() {
    const darkMode = useSelector(isDark);
    const lang = useSelector(getLang);
    const dispatch = useDispatch();


    const [isVisible, setVisible] = useState(false);
    const [index, setIndex] = useState(0);

    const makeOpal = (index) => {
        var otherElements1 = document.getElementsByClassName("opaltext")
        for (let item of otherElements1) {
            item.classList.remove("show")
        }

        var elements = document.getElementsByClassName("opaltext" + index)
        for (let item of elements) {
            item.classList.add("show")
        }
    }

    return (
        <div className={darkMode ? "dark" : ""}>
            <Head>
                <title>HP - Portfolio</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className='dark:bg-gradient-to-b dark:from-gray-800 dark:to-gray-500 px-10 md:px-20 lg:px-30 bg-gradient-to-b from-gray-300 to-gray-100'>
                <section className='min-h-screen'>
                    <nav className='py-10 mb-8 flex justify-between'>
                        <div className='flex gap-10'>
                            <Link href="/">
                                <BsArrowLeftCircle className='cursor-pointer text-2xl lg:text-3xl dark:text-white text-gray-800' />
                            </Link>
                            <h1 className='text-lg md:text-xl lg:text-2xl dark:text-white font-burtons text-gray-800'>kuldoncok</h1>
                        </div>
                        <ul className='flex items-center'>
                            <li>
                                {darkMode ?
                                    <BsFillSunFill onClick={() => {
                                        dispatch({ type: "CHANGE_DARKNESS" })
                                    }} className='cursor-pointer text-2xl lg:text-3xl text-white' />
                                    :
                                    <BsFillMoonFill onClick={() => {
                                        dispatch({ type: "CHANGE_DARKNESS" })
                                    }} className='cursor-pointer text-2xl lg:text-3xl text-gray-800' />
                                }
                            </li>
                            <li>
                                {lang === "ENG" ?
                                    <HU title='V√°lt√°s magyarra' className='h-7 ml-8 cursor-pointer border-2 border-black' onClick={() => dispatch({ type: "CHANGE_LANGUAGE" })} />
                                    :
                                    <GB title='Change to english' className='h-7 ml-8 cursor-pointer border-2 border-black' onClick={() => dispatch({ type: "CHANGE_LANGUAGE" })} />
                                }
                            </li>
                        </ul>
                    </nav>

                    <PhotoSlider
                        images={[
                            "kuldoncok/1.png",
                            "kuldoncok/2.png",
                            "kuldoncok/3.png",
                            "kuldoncok/4.png",
                            "kuldoncok/5.png",
                        ].map((item) => ({ src: item, key: item }))}
                        visible={isVisible}
                        onClose={() => setVisible(false)}
                        index={index}
                        onIndexChange={setIndex}
                    />


                    <div className="grid grid-cols-8 grid-rows-1 pb-10 center mx-auto gap-10 lg:w-9/12 w-11/12 center">
                        <div className="lg:col-span-5 md:col-span-10 sm:col-span-8 col-span-8 h-[18rem] dark:bg-orange-50 bg-sky-300 rounded-3xl p-10 flex flex-col justify-center shadow-card">
                            <h3 className="text-2xl md:text-2xl mb-5 lg:text-2xl text-gray-800 font-burtons">K√ºld√∂nc√∂k</h3>
                            {lang === "ENG" ? <p className="text-xs sm:text-sm md:text-lg lg:text-base xl:text-lg">&quot;K√ºld√∂nc√∂k&quot; is a very simple university project I made when I was a beginner in the developer world. The game logic is powered by plain JavaScript. In the game, you have to connect the same numbers so that the entire board is filled. There are three different levels of difficulty, give it a try! You can start the game on the slide! üòä</p> : <p className="text-xs sm:text-lg md:text-lg lg:text-sm xl:text-lg">A &quot;K√ºld√∂nc√∂k&quot; egy nagyon egyszer≈± egyetemi projekt, amit m√©g a sz√°rnyam bontogat√°sakor k√©sz√≠tettem. Szimpla javascript m≈±k√∂dteti a logik√°t. A j√°t√©kban √∂ssze kell k√∂t√∂getni az azonos sz√°mokat, √∫gy, hogy az eg√©sz p√°lya ki legyen t√∂ltve. H√°rom k√ºl√∂nb√∂z≈ë neh√©zs√©g van, tedd magad pr√≥b√°ra! A slideon elind√≠thatod a j√°t√©kot! üòä</p>}
                        </div>

                        <div className="lg:col-span-3 md:col-span-5 md:col-start-3 sm:col-span-6 sm:col-start-2 col-span-8 h-[18rem]" >
                            <Carousel wrapAround autoplay={true} autoplayInterval={3000} className="rounded-3xl h-[18rem]"
                                defaultControlsConfig={{
                                    pagingDotsStyle: {
                                        fill: "gray",
                                        gap: "5rem"
                                    }
                                }}
                                afterSlide={(index) => makeOpal(index)}
                                renderCenterRightControls={({ nextDisabled, nextSlide }) => (
                                    <button onClick={nextSlide} disabled={nextDisabled}>
                                    </button>
                                )}
                                renderCenterLeftControls={({ previousDisabled, previousSlide }) => (
                                    <button onClick={previousSlide} disabled={previousDisabled}>
                                    </button>
                                )}
                                renderBottomCenterControls={({ currentSlide, goToSlide }) => (
                                    <div className="flex gap-5">
                                        <button onClick={() => goToSlide(0)}>{currentSlide === 0 ? <RxDotFilled className="text-3xl" /> : <RxDot className="text-3xl" />}</button>
                                        <button onClick={() => goToSlide(1)}>{currentSlide === 1 ? <RxDotFilled className="text-3xl" /> : <RxDot className="text-3xl" />}</button>
                                        <button onClick={() => goToSlide(2)}>{currentSlide === 2 ? <RxDotFilled className="text-3xl" /> : <RxDot className="text-3xl" />}</button>
                                    </div>
                                )}
                            >
                                <div className="relative">
                                    <div className="opaltext show opaltext0 text-center absolute h-full w-full flex flex-col justify-center items-center p-8 bg-black bg-opacity-60 gap-10">
                                        <div>
                                            <div className="font-burtons text-white text-3xl">{lang === "ENG" ? "Try out the game: " : "Pr√≥b√°ld ki a j√°t√©kot: "}</div>
                                            <div  className="font-burtons text-white text-base">{lang === "ENG" ? "(For now, on the uni's server)" : "(Egyel√∂re az egyetem szerver√©n) "}</div>

                                        </div>
                                        <div className="text-2xl font-burtons cursor-pointer bg-gray-400 px-4 py-1 rounded-xl shadow-card shadow-black border-2 border-black text-white">
                                            {lang === "ENG" ? <a href='https://people.inf.elte.hu/di2e6a/kuldoncok/index.html' target="_blank">click</a> : <a href='https://people.inf.elte.hu/di2e6a/kuldoncok/index.html' target="_blank">kattints </a>}
                                        </div>
                                    </div>
                                    <Image alt="K√©p a j√°t√©kb√≥l" priority src={jatek} className="h-[18rem] object-cover" style={{ pointerEvents: "none" }} draggable={false} />
                                </div>
                                <div className="relative">
                                    <div className="opaltext opaltext1 text-center absolute h-full w-full flex flex-col justify-center items-center p-8 bg-black bg-opacity-60 gap-10">
                                        <p className="font-burtons text-white text-3xl">

                                            {lang === "ENG" ? "Watch the pictures: " : "N√©zd meg a k√©peket: "}

                                        </p>
                                        <div className="text-2xl font-burtons cursor-pointer bg-gray-400 px-4 py-1 rounded-xl shadow-card shadow-black border-2 border-black text-white">
                                            <button onClick={(e) => { e.stopPropagation(); setIndex(0); setVisible(true) }}>{lang === "ENG" ? "click" : "kattints"}</button>
                                        </div>
                                    </div>
                                    <Image alt="K√©p a j√°t√©kb√≥l" src={viewer} className="h-[18rem] object-cover" style={{ pointerEvents: "none" }} draggable={false} />
                                </div>

                                <div className="relative">
                                    <div className="opaltext opaltext2 text-center absolute h-full w-full flex flex-col justify-center items-center p-8 bg-black bg-opacity-60 gap-10">
                                        <p className="font-burtons text-white text-3xl lg:text-3xl md:text-xl ">

                                            {lang === "ENG" ? "Watch it on GitHub " : "N√©zd meg GitHubon:"}

                                        </p>
                                        <div className="text-2xl font-burtons cursor-not-allowed bg-red-900 px-4 py-1 rounded-xl shadow-card shadow-black border-2 border-black text-white">
                                            <div>{lang === "ENG" ? "coming soon" : "hamarosan"}</div>
                                        </div>
                                    </div>
                                    <Image alt="K√©p a j√°t√©kb√≥l" src={github} className="h-[18rem] object-cover" style={{ pointerEvents: "none" }} draggable={false} />
                                </div>
                            </Carousel>
                        </div>
                    </div>

                    <div className="grid grid-cols-8 auto-rows-[300px] grid-flow-dense pb-10 mx-auto gap-10 lg:w-9/12 w-11/12 center content-between">
                        <div className="2xl:col-span-4 xl:col-span-4 col-span-8 relative rounded-3xl overflow-hidden">
                            <div style={{ pointerEvents: "none" }} className="absolute h-full w-full shadow-innerShadow shadow-black z-10"></div>
                            <Image alt="K√©p a j√°t√©kb√≥l" onClick={() => { setIndex(0); setVisible(true) }} src={png1} className="cursor-pointer object-cover h-full z-0" />
                        </div>

                        <div className="2xl:col-span-4 xl:col-span-4 col-span-8 relative rounded-3xl overflow-hidden">
                            <div style={{ pointerEvents: "none" }} className="absolute h-full w-full shadow-innerShadow shadow-black z-10"></div>
                            <Image alt="K√©p a j√°t√©kb√≥l" onClick={() => { setIndex(1); setVisible(true) }} src={png2} className="cursor-pointer object-cover h-full z-0" />
                        </div>

                        <div className="2xl:col-span-2 xl:col-span-4 md:col-span-4 sm:col-span-4 col-span-8 relative rounded-3xl overflow-hidden">
                            <div style={{ pointerEvents: "none" }} className="absolute h-full w-full shadow-innerShadow shadow-black z-10"></div>
                            <Image alt="K√©p a j√°t√©kb√≥l" onClick={() => { setIndex(2); setVisible(true) }} src={png3} className="cursor-pointer object-cover h-full z-0" />
                        </div>

                        <div className="2xl:col-span-2 xl:col-span-4 lg:col-span-4 md:col-span-4 sm:col-span-4 col-span-8 dark:bg-orange-100 bg-sky-200 rounded-3xl flex flex-col justify-center p-5 shadow-card">
                            <div className="italic text-xl sm:text-base md:text-lg 2xl:text-lg ">{lang === "ENG" ? <p>The game has a save feature, so if someone needs to interrupt the game during their deep thinking, the server will store the current state. This feature is mainly for functionality testing purposes.</p> : <p>A j√°t√©kban van ment√©s lehet≈ës√©g, ha a nagy gondolkod√°s k√∂zben valakinek f√©lbe kell hagynia a j√°t√©kot, a szerver elt√°rolja a jelenlegi √°ll√°st. Ennek igaz√°b√≥l csak funkcionalit√°s pr√≥b√°l√≥ szerepe van.</p>}</div>
                        </div>

                        <div className="2xl:col-span-2 xl:col-span-4 md:col-span-4 sm:col-span-4 col-span-8 relative rounded-3xl overflow-hidden">
                            <div style={{ pointerEvents: "none" }} className="absolute h-full w-full shadow-innerShadow shadow-black z-10"></div>
                            <Image alt="K√©p a j√°t√©kb√≥l" onClick={() => { setIndex(3); setVisible(true) }} src={png4} className="cursor-pointer object-cover h-full z-0" />
                        </div>

                        <div className="2xl:col-span-2 xl:col-span-4 md:col-span-4 sm:col-span-4 col-span-8 relative rounded-3xl overflow-hidden">
                            <div style={{ pointerEvents: "none" }} className="absolute h-full w-full shadow-innerShadow shadow-black z-10"></div>
                            <Image alt="K√©p a j√°t√©kb√≥l" onClick={() => { setIndex(4); setVisible(true) }} src={png5} className="cursor-pointer object-cover h-full z-0" />
                        </div>

                        <div className="col-span-8 sm:col-span-4 row-span-1 dark:bg-orange-300 2xl:col-start-3 bg-sky-50 rounded-3xl flex flex-col justify-center p-5 shadow-card">
                            <div className="2xl:text-lg lg:text-xl text-lg italic text-center">
                                {lang === "ENG" ? <p>Creator:</p> : <p>K√©sz√≠t≈ë:</p>}
                                {lang === "ENG" ? <p>Peter Harsanyi</p> : <p>Hars√°nyi P√©ter</p>}
                                <p>pettko.harsanyi@gmail.com</p>
                                <p>di2e6a</p>
                            </div>

                        </div>
                    </div>
                </section>

            </main>
        </div >
    )
}